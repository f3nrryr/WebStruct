// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace CompModels.DAL.Models;

public partial class GenStructContext : DbContext
{
    public GenStructContext(DbContextOptions<GenStructContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BezierCalculationRequest> BezierCalculationRequests { get; set; }

    public virtual DbSet<BezierRequestFile> BezierRequestFiles { get; set; }

    public virtual DbSet<BezierResultsPhysicalFile> BezierResultsPhysicalFiles { get; set; }

    public virtual DbSet<ComputationalModel> ComputationalModels { get; set; }

    public virtual DbSet<RequestsStatusesHandbook> RequestsStatusesHandbooks { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BezierCalculationRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("BezierCalculationRequests_pkey");

            entity.ToTable("BezierCalculationRequests", "modeling", tb => tb.HasComment("Параметры запроса и ответа (если уже рассчитано). Физические файлы - в др. таблице и табл. связи."));

            entity.Property(e => e.Id).UseIdentityAlwaysColumn();
            entity.Property(e => e.CalcResultPorosity).HasComment("null. до конца  расчета его нет.");
            entity.Property(e => e.RequestedAt)
                .HasComment("without time zone!!!")
                .HasColumnType("timestamp without time zone");
            entity.Property(e => e.Z).HasComment("nullable. есть 2D.");

            entity.HasOne(d => d.RequestStatus).WithMany(p => p.BezierCalculationRequests)
                .HasForeignKey(d => d.RequestStatusId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("beziercalculationrequests_requestsstatuseshandbook_fk");
        });

        modelBuilder.Entity<BezierRequestFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("_bezier_request_file__pk");

            entity.ToTable("Bezier_Request_File", "modeling", tb => tb.HasComment("Связь заявки на расчет и файлов результата."));

            entity.Property(e => e.Id).UseIdentityAlwaysColumn();

            entity.HasOne(d => d.Experiment).WithMany(p => p.BezierRequestFiles)
                .HasForeignKey(d => d.ExperimentId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("bezier_request_file_beziercalculationrequests_fk");

            entity.HasOne(d => d.File).WithMany(p => p.BezierRequestFiles)
                .HasForeignKey(d => d.FileId)
                .OnDelete(DeleteBehavior.Restrict)
                .HasConstraintName("bezier_request_file_bezierresultsphysicalfiles_fk");
        });

        modelBuilder.Entity<BezierResultsPhysicalFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("_bezierresultsphysicalfiles__pk");

            entity.ToTable("BezierResultsPhysicalFiles", "modeling");

            entity.Property(e => e.Id).UseIdentityAlwaysColumn();
            entity.Property(e => e.Extension).IsRequired();
            entity.Property(e => e.FileContent).IsRequired();
            entity.Property(e => e.FileNameWithoutDotAndExtension).IsRequired();
        });

        modelBuilder.Entity<ComputationalModel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ComputationalModels_pkey");

            entity.ToTable("ComputationalModels", "modeling");

            entity.Property(e => e.Id).UseIdentityAlwaysColumn();
            entity.Property(e => e.CreatedAt).HasColumnType("timestamp without time zone");
            entity.Property(e => e.Name).IsRequired();
        });

        modelBuilder.Entity<RequestsStatusesHandbook>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("_requestsstatuseshandbook__pk");

            entity.ToTable("RequestsStatusesHandbook", "modeling");

            entity.Property(e => e.Name).IsRequired();
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}